
PROJECT-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000448  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800060c  08000614  00001614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00001614  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00001614  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  08000614  00001614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800060c  0800060c  0000160c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000610  08000610  00001610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000614  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000614  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c99  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000415  00000000  00000000  000022dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  000026f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000085  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295f3  00000000  00000000  0000284d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000137a  00000000  00000000  0002be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076c20  00000000  00000000  0002d1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001ac  00000000  00000000  000a3e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000a3fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005f4 	.word	0x080005f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080005f4 	.word	0x080005f4

08000204 <gpio_init>:
#include <stm32f4xx.h>

void gpio_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1<<0);  // Enable clock for GPIOA
 8000208:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <gpio_init+0x70>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a19      	ldr	r2, [pc, #100]	@ (8000274 <gpio_init+0x70>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= (1<<2);  // Enable clock for GPIOC
 8000214:	4b17      	ldr	r3, [pc, #92]	@ (8000274 <gpio_init+0x70>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000218:	4a16      	ldr	r2, [pc, #88]	@ (8000274 <gpio_init+0x70>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER &= ~(1<<11);  // Clear mode bits for PA5
 8000220:	4b15      	ldr	r3, [pc, #84]	@ (8000278 <gpio_init+0x74>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a14      	ldr	r2, [pc, #80]	@ (8000278 <gpio_init+0x74>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<10);   // Set PA5 as output
 800022c:	4b12      	ldr	r3, [pc, #72]	@ (8000278 <gpio_init+0x74>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a11      	ldr	r2, [pc, #68]	@ (8000278 <gpio_init+0x74>)
 8000232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000236:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(1<<13);  // Clear mode bits for PC6
 8000238:	4b10      	ldr	r3, [pc, #64]	@ (800027c <gpio_init+0x78>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <gpio_init+0x78>)
 800023e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000242:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1<<12);   // Set PC6 as output
 8000244:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <gpio_init+0x78>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <gpio_init+0x78>)
 800024a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800024e:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(1<<26);  // Clear mode bits for PC13
 8000250:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <gpio_init+0x78>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a09      	ldr	r2, [pc, #36]	@ (800027c <gpio_init+0x78>)
 8000256:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800025a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR |= (1<<27);   // Enable pull-up for PC13
 800025c:	4b07      	ldr	r3, [pc, #28]	@ (800027c <gpio_init+0x78>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a06      	ldr	r2, [pc, #24]	@ (800027c <gpio_init+0x78>)
 8000262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000266:	60d3      	str	r3, [r2, #12]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000
 800027c:	40020800 	.word	0x40020800

08000280 <read_button_state>:

uint8_t read_button_state(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    return (GPIOC->IDR & (1<<13)) == 0;  // Return 1 if button is pressed
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <read_button_state+0x20>)
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800028c:	2b00      	cmp	r3, #0
 800028e:	bf0c      	ite	eq
 8000290:	2301      	moveq	r3, #1
 8000292:	2300      	movne	r3, #0
 8000294:	b2db      	uxtb	r3, r3
}
 8000296:	4618      	mov	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40020800 	.word	0x40020800

080002a4 <delay_with_button>:
#include "pwm.h"
#include <stdint.h>
#include<stm32f4xx.h>

void delay_with_button(uint32_t *delay, uint32_t *press_count)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
    *delay = (*delay == 400) ? 300 : (*delay == 300) ? 200 : (*delay == 200) ? 150 :400;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80002b6:	d00f      	beq.n	80002d8 <delay_with_button+0x34>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80002c0:	d008      	beq.n	80002d4 <delay_with_button+0x30>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80002c8:	d101      	bne.n	80002ce <delay_with_button+0x2a>
 80002ca:	2396      	movs	r3, #150	@ 0x96
 80002cc:	e006      	b.n	80002dc <delay_with_button+0x38>
 80002ce:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80002d2:	e003      	b.n	80002dc <delay_with_button+0x38>
 80002d4:	23c8      	movs	r3, #200	@ 0xc8
 80002d6:	e001      	b.n	80002dc <delay_with_button+0x38>
 80002d8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	6013      	str	r3, [r2, #0]
    *press_count = (*press_count >= 4) ? 0 : *press_count + 1;
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	d803      	bhi.n	80002f0 <delay_with_button+0x4c>
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	e000      	b.n	80002f2 <delay_with_button+0x4e>
 80002f0:	2300      	movs	r3, #0
 80002f2:	683a      	ldr	r2, [r7, #0]
 80002f4:	6013      	str	r3, [r2, #0]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <pwm_intensity>:

void pwm_intensity(uint32_t *duty_cycle, uint32_t *press_count)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
    *duty_cycle = (*duty_cycle == 25) ? 50 : (*duty_cycle == 50) ? 75 : (*duty_cycle == 75) ? 100:25;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b19      	cmp	r3, #25
 8000312:	d00d      	beq.n	8000330 <pwm_intensity+0x2e>
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b32      	cmp	r3, #50	@ 0x32
 800031a:	d007      	beq.n	800032c <pwm_intensity+0x2a>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b4b      	cmp	r3, #75	@ 0x4b
 8000322:	d101      	bne.n	8000328 <pwm_intensity+0x26>
 8000324:	2364      	movs	r3, #100	@ 0x64
 8000326:	e004      	b.n	8000332 <pwm_intensity+0x30>
 8000328:	2319      	movs	r3, #25
 800032a:	e002      	b.n	8000332 <pwm_intensity+0x30>
 800032c:	234b      	movs	r3, #75	@ 0x4b
 800032e:	e000      	b.n	8000332 <pwm_intensity+0x30>
 8000330:	2332      	movs	r3, #50	@ 0x32
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]
    *press_count = (*press_count >= 4) ? 0 : *press_count + 1;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b03      	cmp	r3, #3
 800033c:	d803      	bhi.n	8000346 <pwm_intensity+0x44>
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	e000      	b.n	8000348 <pwm_intensity+0x46>
 8000346:	2300      	movs	r3, #0
 8000348:	683a      	ldr	r2, [r7, #0]
 800034a:	6013      	str	r3, [r2, #0]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <main>:

int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
    uint32_t delay = 400;
 800035e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000362:	60fb      	str	r3, [r7, #12]
    uint32_t duty_cycle = 25;
 8000364:	2319      	movs	r3, #25
 8000366:	60bb      	str	r3, [r7, #8]
    uint32_t press_count = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]

    gpio_init();
 800036c:	f7ff ff4a 	bl	8000204 <gpio_init>
    Timer_init();
 8000370:	f000 f8a4 	bl	80004bc <Timer_init>
    PWM_init();
 8000374:	f000 f83c 	bl	80003f0 <PWM_init>
    PWM_set_duty_cycle(duty_cycle);
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f88e 	bl	800049c <PWM_set_duty_cycle>

    while(1)
    {
        if (read_button_state())
 8000380:	f7ff ff7e 	bl	8000280 <read_button_state>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d01a      	beq.n	80003c0 <main+0x68>
        {
            delay_with_button(&delay, &press_count);
 800038a:	1d3a      	adds	r2, r7, #4
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	4611      	mov	r1, r2
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff86 	bl	80002a4 <delay_with_button>
            pwm_intensity(&duty_cycle, &press_count);
 8000398:	1d3a      	adds	r2, r7, #4
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffae 	bl	8000302 <pwm_intensity>
            PWM_set_duty_cycle(duty_cycle);
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f877 	bl	800049c <PWM_set_duty_cycle>
            Tim2_DELAY(200);  // Debounce delay
 80003ae:	20c8      	movs	r0, #200	@ 0xc8
 80003b0:	f000 f8aa 	bl	8000508 <Tim2_DELAY>
            while (read_button_state());  // Wait until button is released
 80003b4:	bf00      	nop
 80003b6:	f7ff ff63 	bl	8000280 <read_button_state>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d1fa      	bne.n	80003b6 <main+0x5e>
        }

        GPIOA->ODR |= (1 << 5);  // Turn on internal LED (PA5)
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <main+0x94>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a09      	ldr	r2, [pc, #36]	@ (80003ec <main+0x94>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6153      	str	r3, [r2, #20]
        Tim2_DELAY(delay);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f89a 	bl	8000508 <Tim2_DELAY>
        GPIOA->ODR &= ~(1 << 5); // Turn off internal LED (PA5)
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <main+0x94>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <main+0x94>)
 80003da:	f023 0320 	bic.w	r3, r3, #32
 80003de:	6153      	str	r3, [r2, #20]
        Tim2_DELAY(delay);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f890 	bl	8000508 <Tim2_DELAY>
        if (read_button_state())
 80003e8:	e7ca      	b.n	8000380 <main+0x28>
 80003ea:	bf00      	nop
 80003ec:	40020000 	.word	0x40020000

080003f0 <PWM_init>:
#include "pwm.h"
#include <stm32f4xx.h>

void PWM_init(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1<<1);  // Enable clock for TIM2
 80003f4:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <PWM_init+0xa0>)
 80003f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f8:	4a25      	ldr	r2, [pc, #148]	@ (8000490 <PWM_init+0xa0>)
 80003fa:	f043 0302 	orr.w	r3, r3, #2
 80003fe:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= (1<<2);  // Enable clock for GPIOC
 8000400:	4b23      	ldr	r3, [pc, #140]	@ (8000490 <PWM_init+0xa0>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a22      	ldr	r2, [pc, #136]	@ (8000490 <PWM_init+0xa0>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOC->MODER |= (1<<13);  // Set PC6 to alternate function mode
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <PWM_init+0xa4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a20      	ldr	r2, [pc, #128]	@ (8000494 <PWM_init+0xa4>)
 8000412:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000416:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1<<12);
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <PWM_init+0xa4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a1d      	ldr	r2, [pc, #116]	@ (8000494 <PWM_init+0xa4>)
 800041e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000422:	6013      	str	r3, [r2, #0]

    GPIOC->AFR[0] &= ~(0xF << 24);  // Clear alternate function settings for PC6
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <PWM_init+0xa4>)
 8000426:	6a1b      	ldr	r3, [r3, #32]
 8000428:	4a1a      	ldr	r2, [pc, #104]	@ (8000494 <PWM_init+0xa4>)
 800042a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800042e:	6213      	str	r3, [r2, #32]
    GPIOC->AFR[0] |= (1<<25);       // Set PC6 to AF2 (TIM3_CH1)
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <PWM_init+0xa4>)
 8000432:	6a1b      	ldr	r3, [r3, #32]
 8000434:	4a17      	ldr	r2, [pc, #92]	@ (8000494 <PWM_init+0xa4>)
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043a:	6213      	str	r3, [r2, #32]

    TIM3->PSC = 1600 - 1;       // Set prescaler to 1600 (10kHz PWM frequency)
 800043c:	4b16      	ldr	r3, [pc, #88]	@ (8000498 <PWM_init+0xa8>)
 800043e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 100 - 1;        // Set auto-reload value to 99 (100Hz PWM frequency)
 8000444:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <PWM_init+0xa8>)
 8000446:	2263      	movs	r2, #99	@ 0x63
 8000448:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCMR1 |= (6 << 4);    // PWM mode 1
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <PWM_init+0xa8>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <PWM_init+0xa8>)
 8000450:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000454:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (1 << 3);    // Enable preload register on TIM3_CCR1
 8000456:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <PWM_init+0xa8>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a0f      	ldr	r2, [pc, #60]	@ (8000498 <PWM_init+0xa8>)
 800045c:	f043 0308 	orr.w	r3, r3, #8
 8000460:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= (1 << 0);     // Enable capture/compare 1 output
 8000462:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <PWM_init+0xa8>)
 8000464:	6a1b      	ldr	r3, [r3, #32]
 8000466:	4a0c      	ldr	r2, [pc, #48]	@ (8000498 <PWM_init+0xa8>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6213      	str	r3, [r2, #32]
    TIM3->CR1 |= (1 << 7);      // Enable auto-reload preload
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <PWM_init+0xa8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a09      	ldr	r2, [pc, #36]	@ (8000498 <PWM_init+0xa8>)
 8000474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000478:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= (1 << 0);      // Enable counter
 800047a:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <PWM_init+0xa8>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a06      	ldr	r2, [pc, #24]	@ (8000498 <PWM_init+0xa8>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6013      	str	r3, [r2, #0]
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40023800 	.word	0x40023800
 8000494:	40020800 	.word	0x40020800
 8000498:	40000400 	.word	0x40000400

0800049c <PWM_set_duty_cycle>:

void PWM_set_duty_cycle(uint32_t duty_cycle)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
    TIM3->CCR1 = duty_cycle;  // Set duty cycle
 80004a4:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <PWM_set_duty_cycle+0x1c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40000400 	.word	0x40000400

080004bc <Timer_init>:
#include "timer.h"
#include <stm32f4xx.h>

void Timer_init(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1<<0);  // Enable clock for TIM2
 80004c0:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <Timer_init+0x48>)
 80004c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000504 <Timer_init+0x48>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 16000;       // Set prescaler to 16000
 80004cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d0:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80004d4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000-1;      // Set auto-reload value to 999
 80004d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004de:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;           // Reset counter
 80004e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CR1 |= (1<<0);     // Enable Timer 2
 80004e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	6013      	str	r3, [r2, #0]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800

08000508 <Tim2_DELAY>:

void Tim2_DELAY(uint32_t delay)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    TIM2->ARR = delay - 1;  // Update generation
 8000510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3b01      	subs	r3, #1
 8000518:	62d3      	str	r3, [r2, #44]	@ 0x2c
    while(!(TIM2->SR & (1<<0)));  // Wait until update interrupt flag is set
 800051a:	bf00      	nop
 800051c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f8      	beq.n	800051c <Tim2_DELAY+0x14>
    TIM2->SR &= ~(1<<0);          // Clear update interrupt flag
 800052a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	f023 0301 	bic.w	r3, r3, #1
 8000538:	6113      	str	r3, [r2, #16]
    TIM3->EGR |= (1<<0);
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <Tim2_DELAY+0x4c>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <Tim2_DELAY+0x4c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6153      	str	r3, [r2, #20]


}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40000400 	.word	0x40000400

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	480d      	ldr	r0, [pc, #52]	@ (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800055c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	@ (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	@ (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	@ (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f000 f811 	bl	80005ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff fee5 	bl	8000358 <main>

0800058e <LoopForever>:

LoopForever:
  b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800059c:	08000614 	.word	0x08000614
  ldr r2, =_sbss
 80005a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005a4:	2000001c 	.word	0x2000001c

080005a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4d0d      	ldr	r5, [pc, #52]	@ (80005e4 <__libc_init_array+0x38>)
 80005b0:	4c0d      	ldr	r4, [pc, #52]	@ (80005e8 <__libc_init_array+0x3c>)
 80005b2:	1b64      	subs	r4, r4, r5
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	2600      	movs	r6, #0
 80005b8:	42a6      	cmp	r6, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	4d0b      	ldr	r5, [pc, #44]	@ (80005ec <__libc_init_array+0x40>)
 80005be:	4c0c      	ldr	r4, [pc, #48]	@ (80005f0 <__libc_init_array+0x44>)
 80005c0:	f000 f818 	bl	80005f4 <_init>
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	2600      	movs	r6, #0
 80005ca:	42a6      	cmp	r6, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d4:	4798      	blx	r3
 80005d6:	3601      	adds	r6, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f855 3b04 	ldr.w	r3, [r5], #4
 80005de:	4798      	blx	r3
 80005e0:	3601      	adds	r6, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	0800060c 	.word	0x0800060c
 80005e8:	0800060c 	.word	0x0800060c
 80005ec:	0800060c 	.word	0x0800060c
 80005f0:	08000610 	.word	0x08000610

080005f4 <_init>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr

08000600 <_fini>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr
